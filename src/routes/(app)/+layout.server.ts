import { getRegionCurrency } from "$lib/server/region";

/** @type {import('./$types').PageLoad} */
export async function load({ fetch, getClientAddress, cookies, locals: { getSession } }) {
	const clientAddress = getClientAddress();
	const currency = await getRegionCurrency(clientAddress, cookies);

	const queries = [{ key: "currency", value: currency }];
	const queryString = queries.map((query) => `${query.key}=${query.value}`).join("&");
	const url = `/api/product?${queryString}`;

	const productResponse = await fetch(url, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	});
	const products = await productResponse.json();

	const pageSlug = "home";
	const pageResponse = await fetch(`/api/page?slug=${pageSlug}`, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	});
	const pageData = await pageResponse.json();

	return {
		session: await getSession(),
		products,
		pageData
	};
}

/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	isr: {
		// Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
		// Setting the value to `false` means it will never expire.
		expiration: 120

		// Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
		// with a __prerender_bypass=<token> cookie.
		//
		// Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.

		// List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored,
		// ensuring that they do not result in content being regenerated unnecessarily
	}
};
