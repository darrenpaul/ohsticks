import { delivered } from "$lib/constants/orderUpdate";

/** @type {import('./$types').PageLoad} */
export async function load({ params, fetch, locals: { getSession } }) {
	const productSlug = params.slug;
	const session = await getSession();

	const reviewsResponse = await fetch(`/api/review?slug=${productSlug}`, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	});
	const reviews = await reviewsResponse.json();

	if (!session) {
		return {
			reviews
		};
	}

	const ordersResponse = await fetch("/api/order", {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	});

	const orders = await ordersResponse.json();

	// check if user has ordered this product and it has been delivered
	const filterOutNotDelivered = orders.filter((order) => order.status === delivered);
	const productsFromOrders = filterOutNotDelivered.map((order) => order.items).flat();
	const matchedProducts = productsFromOrders.filter((product) => product.slug === productSlug);

	const canReview = !!matchedProducts.length;

	return {
		reviews,
		canReview
	};
}

/** @type {import('@sveltejs/adapter-vercel').Config} */
export const config = {
	isr: {
		// Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function.
		// Setting the value to `false` means it will never expire.
		expiration: 120

		// Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
		// with a __prerender_bypass=<token> cookie.
		//
		// Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.

		// List of valid query parameters. Other parameters (such as utm tracking codes) will be ignored,
		// ensuring that they do not result in content being regenerated unnecessarily
	}
};
